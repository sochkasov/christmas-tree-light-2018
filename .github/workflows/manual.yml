name: PlatformIO CI

#on: [push]
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
jobs:
  build:

    runs-on: ubuntu-latest
#    outputs:
#      firmware_bin_path: ${{ steps.setup_url_step.outputs.url }}  # for store firmware bin path
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

# Compile firmware ---
    - name: Compile firmware for Adruino platform
      run: pio run --environment megaatmega2560
    - name: Compile firmware for esp8266 platform
      run: pio run --environment esp8266

# Move firmware bin to new place
    - name: Display structure of working dir
      id: make_firmware_archive
      run: mkdir ~/firmware; mkdir ~/firmware/esp8266; cp .pio/build/esp8266/firmware.bin ~/firmware/esp8266; mkdir ~/firmware/arduino; cp .pio/build/megaatmega2560/firmware.hex ~/firmware/arduino; tar -czf ~/release.tar.gz ~/firmware
#    - name: Display structure 
#      run: ls -R firmware

    - name: Upload artifacts
      uses: actions/upload-artifact@master
      id: upload-artifact
      with:
        name: firmware-artifact
        path: ~/release.tar.gz

# Save firmware path for release attach 
#    - name: setup url
#      id: setup_url_step
#      run: echo "::set-output name=url::${{ steps.upload-artifact.outputs.download-path }}"

#    - name: 'ls path'
#      run: ls -R /home/runner/

# Debug ----
#    - name: Dump GitHub needs
#      env:
#        GITHUB_NEEDS: ${{ toJson(needs) }}
#      run: echo "$GITHUB_NEEDS"

#    - name: Dump GitHub job
#      env:
#        GITHUB_JOB: ${{ toJson(job) }}
#      run: echo "$GITHUB_JOB"

#    - name: Dump GitHub steps
#      env:
#        GITHUB_STEP: ${{ toJson(steps) }}
#      run: echo "$GITHUB_STEP"

# steps.download.outputs.download-path : "/home/runner/work/christmas-tree-light-2018/christmas-tree-light-2018/release.tar.gz"
# steps.setup_url_step.outputs.url 

# Release create --------------------------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.1.0
      id: download-artifact
      with:
        name: firmware-artifact
        path: ./
# Debug ----
#    - name: 'Download firmware binary path'
#      run: echo ${{ needs.build.outputs.firmware_bin_path }}

    - name: 'ls path'
      run: ls -R /home/runner/
#      run: ls ${{ needs.build.outputs.firmware_bin_path }}; ls /home/runner/

#    - name: Dump GitHub DATA
#      env:
#        GITHUB_DATA: ${{ toJson(needs.build.outputs) }}
#      run: echo ${{ needs.build.outputs }} ;echo "$GITHUB_DATA"

#    - name: Dump GitHub needs
#      env:
#        GITHUB_NEEDS: ${{ toJson(needs) }}
#      run: echo "$GITHUB_NEEDS"

#    - name: Dump GitHub job
#      env:
#        GITHUB_JOB: ${{ toJson(job) }}
#      run: echo "$GITHUB_JOB"

#    - name: Dump GitHub steps
#      env:
#        GITHUB_STEP: ${{ toJson(steps) }}
#      run: echo "$GITHUB_STEP"

#      steps.download-artifact.outputs.download-path

#    - name: Dump env
#      run: env | sort

#    - name: Dump GitHub context
#      env:
#        GITHUB_CONTEXT: ${{ toJson(github) }}
#      run: echo "$GITHUB_CONTEXT"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
#        body: # <-- from tag message
        draft: true
        prerelease: false

# Push artefacts to release ------
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ steps.download-artifact.outputs.download-path }}/release.tar.gz
        asset_name: release-${{github.ref_name}}.tar.gz
        asset_content_type: application/gzip